
set nocompatible                " choose no compatibility with legacy vi

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'pearofducks/ansible-vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'docker/docker' , {'rtp': '/contrib/syntax/vim/'}
Plugin 'morhetz/gruvbox'
Plugin 'othree/html5.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'pallets/jinja'
Plugin 'tomasr/molokai'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'myusuf3/numbers.vim'
Plugin 'hdima/python-syntax'
Plugin 'tmhedberg/SimpylFold'
Plugin 'ervandew/supertab'
Plugin 'godlygeek/tabular'
Plugin 'majutsushi/tagbar'
Plugin 'leafgarland/typescript-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-bundler'
Plugin 'vim-scripts/VimClojure'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'tpope/vim-db'
Plugin 'easymotion/vim-easymotion'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'fatih/vim-go'
Plugin 'pangloss/vim-javascript'
Plugin 'elzr/vim-json'
Plugin 'embear/vim-localvimrc'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'tpope/vim-rails'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rvm'
Plugin 'Matt-Deacalion/vim-systemd-syntax'
Plugin 'tpope/vim-surround'
Plugin 'hashivim/vim-packer'
Plugin 'hashivim/vim-terraform'
Plugin 'cespare/vim-toml'
Plugin 'hashivim/vim-vagrant'
Plugin 'hashivim/vim-vaultproject'
Plugin 'vimwiki/vimwiki'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'othree/xml.vim'
Plugin 'sukima/xmledit'

call vundle#end()
filetype plugin indent on       " load file type plugins + indentation

autocmd vimenter * colorscheme gruvbox
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ Book\ 11

set foldcolumn=3

" Turn off bell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

set number
set ruler
syntax enable
set encoding=utf-8

set showcmd                     " display incomplete commands

set wildmenu                    " visual autocomplete for command menu
set showmatch                   " highlight matching [{()}]

"" Whitespace
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set softtabstop=2
set backspace=indent,eol,start  " backspace through everything in insert mode

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
vnoremap // y/<C-R>"<CR>

" Show (partial) command in the status line
set showcmd

set undofile

" Remap F1 to Esc
map <F1> <Esc>
imap <F1> <Esc>
nmap <F1> <Esc>

" Remap ESC
imap jj <Esc>

" Save a little easier
imap <Esc><Esc> :w<CR>

" Use bash as the vim shell: http://bit.ly/ezxLUf
set shell=bash

" Set the colors
set background=dark

highlight Search ctermfg=Blue ctermbg=LightGrey
" Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59


" For all text files set 'textwidth' to 79 characters.
autocmd FileType text setlocal textwidth=79

" Set vertical line at 100 chars
set colorcolumn=100

" Highlight any line over 100 chars
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%121v.\+/

" From http://www.pixelbeat.org/settings/.vimrc
if v:version >= 700
  set cursorline   "highlight current line
endif

" Use the same symbols as TextMate for tabstops and EOLs
" display tabs and trailing spaces
set list
set listchars=tab:‚ñ∏\ ,eol:¬¨,trail:‚ãÖ,nbsp:‚ãÖ

if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j
endif

augroup vimrc_todo
    au!
    au Syntax * syn match MyTodo /\v<(FIXME|NOTE|TODO|OPTIMIZE|ASSUMPTION|HACK|DEBUG|XXX)/
          \ containedin=.*Comment,vimCommentTitle
augroup END
hi def link MyTodo Todo

" Autosave on make and other similar commands
set autowrite

" Strip trailing whitespace
" http://rails-bestpractices.com/posts/60-remove-trailing-whitespace
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l,c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
\| exe "normal! g`\"" | endif

" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>


if has("statusline") && !&cp
  let g:airline_powerline_fonts = 1
  let g:airline_theme='solarized'
  let g:airline_solarized_bg='dark'


  let g:airline#extensions#nerdtree_statusline = 1
  let g:NERDTreeStatusline="NERD"

  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  let g:airline_left_sep = 'ÓÇ∞'
  let g:airline_right_sep = 'ÓÇ≤'
  let g:airline_symbols.branch = 'ÓÇ†'
  let g:airline_symbols.crypt = 'üîí'
  let g:airline_symbols.linenr = '‚ò∞ '
  let g:airline_symbols.paste = 'œÅ'
  let g:airline_symbols.readonly = 'ÓÇ¢'
  let g:airline_symbols.spell = 'Íû®'
  let g:airline_symbols.whitespace = 'Œû'
  let g:airline_symbols.maxlinenr = 'ÓÇ°'

  set laststatus=2  " always show the status bar

  " Start the status line
  set statusline=%r%f\ %y\ %m[%{&ff}]

  " Finish the statusline
  set statusline+=\ Line:\ %l
  set statusline+=\ Col:\ %v
  set statusline+=\ Buf:\ %n
endif

set scrolloff=5

set undodir=~/.vim/tmp
set backupdir=~/.vim/tmp    " where to put backup files.
set directory=~/.vim/tmp    " where to put swap files.

" Use system clipboard as default one
set clipboard=unnamed

map <leader>f :CommandT<cr>
map <leader>t :TagbarToggle<cr>

map <leader>n :NERDTreeToggle<cr>

map <leader>/ <plug>NERDCommenterToggle<CR>
imap <leader>/ <Esc><plug>NERDCommenterToggle<CR>i

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

map ,tn :tabnew<CR>
map ,tc :tabclose<CR>
map ,t[ :tabprevious<CR>
map ,t] :tabnext<CR>

" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

set wildmode=longest,list,full
set wildmenu

" Make it easier to capitalize words
nmap gcu gUe
nmap gcl gue

if filereadable(expand("~/.vim/syntax/scons.vim"))
  au BufNewFile,BufRead SCons* set filetype=scons
endif

let g:rubytest_in_quickfix = 0

highlight Normal ctermbg=black ctermfg=white

" Python
autocmd BufNewFile,BufRead *.py set tabstop=2 softtabstop=2 shiftwidth=2 textwidth=80 smarttab expandtab

" Rspec
autocmd BufRead *_spec.rb syn keyword rubyRspec describe context it specify it_should_behave_like before after setup subject its shared_examples_for shared_context let
highlight def link rubyRspec Function

" Silver Searchers instead of Ack
let g:ackprg = 'ag --nogroup --nocolor --column'

" VimClojure support
let g:vimclojure#HighlightBuiltins = 1
let g:vimclojure#ParenRainbow = 1

let g:go_fmt_command = "goimports"

set tags^=./.git/tags;

" Packer files
au BufNewFile,BufRead *.packer set filetype=json

au BufNewFile,BufRead *.sjs set filetype=javascript

" JavaScript stuff
au BufNewFile,BufRead &.ts set filetype=typescript

" Don't conceal JSON quotes
let g:vim_json_syntax_conceal = 0
let g:indentLine_noConcealCursor=""


" Disable asking loading local vimrc files
let g:localvimrc_enable=1
let g:localvimrc_ask=0

" Enable AngularJS
autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 1

" Setup JS pretty templates
autocmd FileType typescript syn clear foldBraces

" Setup Ansible
au BufRead,BufNewFile */playbooks/*.yml set filetype=yaml.ansible

" Include - in tab-completion
set iskeyword+=-

" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

