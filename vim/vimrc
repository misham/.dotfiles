
set nocompatible                " choose no compatibility with legacy vi

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'wincent/command-t'
Plugin 'docker/docker' , {'rtp': '/contrib/syntax/vim/'}
Plugin 'othree/html5.vim'
Plugin 'pallets/jinja'
Plugin 'tomasr/molokai'
Plugin 'scrooloose/nerdtree'
Plugin 'myusuf3/numbers.vim'
Plugin 'hdima/python-syntax'
Plugin 'majutsushi/tagbar'
Plugin 'leafgarland/typescript-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-bundler'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'vim-scripts/VimClojure'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'fatih/vim-go'
Plugin 'pangloss/vim-javascript'
Plugin 'elzr/vim-json'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'tpope/vim-rails'
Plugin 'vim-ruby/vim-ruby'
Plugin 'Matt-Deacalion/vim-systemd-syntax'
Plugin 'hashivim/vim-terraform'
Plugin 'hashivim/vim-vagrant'

call vundle#end()
filetype plugin indent on       " load file type plugins + indentation

set number
set ruler
syntax enable
set encoding=utf-8

set showcmd                     " display incomplete commands

set wildmenu                    " visual autocomplete for command menu
set showmatch                   " highlight matching [{()}]

"" Whitespace
set tabstop=4 shiftwidth=4      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set softtabstop=4
set backspace=indent,eol,start  " backspace through everything in insert mode

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

" Show (partial) command in the status line
set showcmd

set undofile

" Remap F1 to Esc
map <F1> <Esc>
imap <F1> <Esc>
nmap <F1> <Esc>

" Remap ESC
imap jj <Esc>

" Use bash as the vim shell: http://bit.ly/ezxLUf
set shell=bash

" Set the colors
set background=dark
colorscheme molokai
highlight StatusLine ctermfg=DarkBlue ctermbg=LightGray
highlight Search ctermfg=Blue ctermbg=LightGrey
" Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59


" For all text files set 'textwidth' to 79 characters.
autocmd FileType text setlocal textwidth=79

" Set vertical line at 100 chars
set colorcolumn=100

" Highlight any line over 100 chars
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%101v.\+/

" From http://www.pixelbeat.org/settings/.vimrc
if v:version >= 700
  set cursorline   "highlight current line
endif

" Use the same symbols as TextMate for tabstops and EOLs
"display tabs and trailing spaces
set list
set listchars=tab:▸\ ,eol:¬,trail:⋅,nbsp:⋅

" Autosave on make and other similar commands
set autowrite

" Strip trailing whitespace
" http://rails-bestpractices.com/posts/60-remove-trailing-whitespace
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l,c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
\| exe "normal! g`\"" | endif

" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" :TODO: Move all of this into it's own file
"        and customize it with some examples from:
"        https://github.com/scrooloose/vimfiles/blob/master/vimrc#L78
"        http://got-ravings.blogspot.com/search/label/statuslines
"        http://got-ravings.blogspot.com/2008/08/vim-pr0n-making-statuslines-that-own.html
if has("statusline") && !&cp
  set laststatus=2  " always show the status bar

  " Start the status line
  set statusline=%r%f\ %y\ %m[%{&ff}]

  " Finish the statusline
  set statusline+=\ Line:\ %l
  set statusline+=\ Col:\ %v
  set statusline+=\ Buf:\ %n
endif

set scrolloff=5

set undodir=~/.vim/tmp
set backupdir=~/.vim/tmp    " where to put backup files.
set directory=~/.vim/tmp    " where to put swap files.

map <leader>f :CommandT<cr>
map <leader>T :TagbarToggle<cr>

map <leader>n :NERDTreeToggle<cr>

map <leader>/ <plug>NERDCommenterToggle<CR>
imap <leader>/ <Esc><plug>NERDCommenterToggle<CR>i

"au FocusLost * :wa  " Save on loosing focus

" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

set wildmode=longest,list,full
set wildmenu

" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

if filereadable(expand("~/.vim/syntax/scons.vim"))
  au BufNewFile,BufRead SCons* set filetype=scons
endif

let g:rubytest_in_quickfix = 0


highlight Normal ctermbg=black ctermfg=white

" Python
autocmd BufNewFile,BufRead *.py set tabstop=2 softtabstop=2 shiftwidth=2 textwidth=80 smarttab expandtab

" Rspec
autocmd BufRead *_spec.rb syn keyword rubyRspec describe context it specify it_should_behave_like before after setup subject its shared_examples_for shared_context let
highlight def link rubyRspec Function

" Silver Searchers instead of Ack
let g:ackprg = 'ag --nogroup --nocolor --column'

" VimClojure support
let g:vimclojure#HighlightBuiltins = 1
let g:vimclojure#ParenRainbow = 1

" Packer files
au BufNewFile,BufRead *.packer set filetype=json

au BufNewFile,BufRead *.sjs set filetype=javascript

" JavaScript stuff
au BufNewFile,BufRead &.ts set filetype=typescript

" Don't conceal JSON quotes
let g:vim_json_syntax_conceal = 0

